from itertools import permutations

class WeightedGraph:
    def init(self):
        self.cityList = {}

    def Print_Peta(self):
        for city in self.cityList:
            print(city, ":", self.cityList[city])
            for neighbor, distance in self.cityList[city].items():
                print("    ->", neighbor, ":", distance)

    def Tambah_Kota(self, kota):
        if kota not in self.cityList:
            self.cityList[kota] = {}
            return True
        return False

    def hapusKota(self, kotaDihapus):
        if kotaDihapus in self.cityList:
            del self.cityList[kotaDihapus]
            for kota in self.cityList:
                if kotaDihapus in self.cityList[kota]:
                    del self.cityList[kota][kotaDihapus]
            return True
        return False

    def Membuat_Jalan(self, kota1, kota2, jarak):
        if kota1 in self.cityList and kota2 in self.cityList:
            self.cityList[kota1][kota2] = jarak
            self.cityList[kota2][kota1] = jarak
            return True
        return False

    def hapusJalan(self, kota1, kota2):
        if kota1 in self.cityList and kota2 in self.cityList:
            if kota2 in self.cityList[kota1]:
                del self.cityList[kota1][kota2]
                del self.cityList[kota2][kota1]
                return True
        return False

def dijkstra(self, source):
        distances = {}
        for city in self.cityList:
            distances[city] = float('inf')
        distances[source] = 0
        print (distances)
        unvisited_cities = []
        for city in self.cityList:
            unvisited_cities.append(city)
        print (unvisited_cities)

        while unvisited_cities:
            min_distance = float('inf')
            closest_city = None
            for city in unvisited_cities:
                if distances[city] < min_distance:
                    min_distance = distances[city]
                    closest_city = city
            unvisited_cities.remove(closest_city)
            for neighbor, weight in self.cityList[closest_city].items():
                distance = distances[closest_city] + weight
                if distance < distances[neighbor]:
                    distances[neighbor] = distance

        return distances
    
    def tsp(self):
        shortest_distance = float('inf')
        shortest_path = []
        cities = list(self.cityList.keys())
        for path in permutations(cities):
            total_distance = 0
            for i in range(len(path) - 1):
                if path[i] in self.cityList and path[i + 1] in self.cityList[path[i]]:
                    total_distance += self.cityList[path[i]][path[i + 1]]
                else:
                    total_distance = float('inf')
                    break
            if total_distance < shortest_distance:
                shortest_distance = total_distance
                shortest_path = path

        return shortest_path, shortest_distance
